{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/ConversationContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, useState, createContext, useRef, useEffect } from 'react';\nimport { ParticipantContext } from './ParticipantContext';\nimport { useSocketContext } from './SocketContext'; // import io from 'socket.io-client';\n// const socket = io.connect('http://localhost:4000');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationPropsContext = /*#__PURE__*/createContext();\nexport function useConversationContext() {\n  _s();\n\n  return useContext(ConversationPropsContext);\n}\n\n_s(useConversationContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n;\nexport function ConversationPropsProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const socket = useSocketContext();\n  const [showChat, setShowChat] = useState(true);\n  const [chat, setChat] = useState([]);\n  const [userMessage, setUserMessage] = useState('');\n  const {\n    name\n  } = useContext(ParticipantContext);\n  const inputRef = useRef(null);\n\n  const getUserInput = e => setUserMessage(e.target.value);\n\n  const addMessageToChat = messageData => {\n    // if(messageData){\n    //   //displays message for all users\n    //   setChat([\n    //     ...chat, messageData\n    //   ])\n    // }\n    if (messageData) {\n      setChat(prevChat => {\n        const newChat = prevChat.map(message => {\n          return { ...message,\n            messageData\n          };\n        });\n        return newChat;\n      });\n    } // console.log(chat)\n\n  };\n\n  const emitMessage = () => {\n    if (userMessage !== '') {\n      const messageData = {\n        sender: name,\n        message: userMessage\n      }; //sends message to server\n\n      socket.emit('chat_message', messageData);\n    }\n\n    setUserMessage('');\n    inputRef.current.value = \"\";\n  };\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('system_message', message => {\n      addMessageToChat(message);\n    });\n    socket.on(\"receive_chat_message\", data => {\n      addMessageToChat(data);\n    });\n    return () => {\n      socket.off('recieve_message');\n      socket.off('system_message');\n      socket.off('user_connected');\n    };\n  }, [socket, addMessageToChat]);\n  const conversationProps = {\n    showChat,\n    setShowChat,\n    chat,\n    setChat,\n    userMessage,\n    setUserMessage,\n    emitMessage,\n    addMessageToChat,\n    inputRef,\n    getUserInput //socket\n\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationPropsContext.Provider, {\n    value: {\n      conversationProps\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ConversationPropsProvider, \"hnIXes+AA5zm9mYThumR9Ax256U=\", false, function () {\n  return [useSocketContext];\n});\n\n_c = ConversationPropsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationPropsProvider\");","map":{"version":3,"names":["useContext","useState","createContext","useRef","useEffect","ParticipantContext","useSocketContext","ConversationPropsContext","useConversationContext","ConversationPropsProvider","children","socket","showChat","setShowChat","chat","setChat","userMessage","setUserMessage","name","inputRef","getUserInput","e","target","value","addMessageToChat","messageData","prevChat","newChat","map","message","emitMessage","sender","emit","current","on","data","off","conversationProps"],"sources":["/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/ConversationContext.js"],"sourcesContent":["import {useContext, useState, createContext, useRef, useEffect} from 'react';\nimport { ParticipantContext } from './ParticipantContext';\nimport { useSocketContext } from './SocketContext';\n// import io from 'socket.io-client';\n\n// const socket = io.connect('http://localhost:4000');\n\n\nconst ConversationPropsContext = createContext();\n\nexport function useConversationContext(){\n    return useContext(ConversationPropsContext)\n};\n\nexport function ConversationPropsProvider({children}){\n\n    const socket = useSocketContext();\n\n    const [showChat, setShowChat] = useState(true);\n\n    const [ chat, setChat ] = useState([]);\n    const [ userMessage, setUserMessage ] = useState('');\n\n    const {name} = useContext(ParticipantContext);\n\n    const inputRef = useRef(null);\n    \n    const getUserInput = (e) => setUserMessage(e.target.value);\n\n    const addMessageToChat = (messageData) => {   \n        // if(messageData){\n        //   //displays message for all users\n        //   setChat([\n        //     ...chat, messageData\n        //   ])\n        // }\n        if(messageData){\n\n                setChat( prevChat => {\n                    \n                    const newChat = prevChat.map((message)=>{\n                        return {\n                            ...message, messageData\n                        }\n                    })\n\n                    return newChat;\n                })\n\n        }\n\n        // console.log(chat)\n        \n    };\n\n    const emitMessage = () => {\n    \n        if(userMessage !== ''){\n\n            const messageData = {\n                sender: name,\n                message: userMessage\n            }\n\n            //sends message to server\n            socket.emit('chat_message', messageData);\n        }\n\n        setUserMessage('');\n        inputRef.current.value = \"\";\n        \n    };\n\n\n    useEffect(()=>{\n\n        if(!socket) return;\n\n        socket.on('system_message', (message)=>{\n            addMessageToChat(message)\n        })\n\n        socket.on(\"receive_chat_message\", (data) =>{\n            addMessageToChat(data)\n        })\n      \n        return () => {\n            socket.off('recieve_message');\n            socket.off('system_message');\n            socket.off('user_connected');\n        }\n\n    },[socket, addMessageToChat])\n\n\n\n    const conversationProps = {\n        showChat, setShowChat,\n        chat, setChat,\n        userMessage, setUserMessage,\n        emitMessage, addMessageToChat,\n         inputRef,\n        getUserInput\n        //socket\n    };\n\n    return (\n        <ConversationPropsContext.Provider value={{conversationProps}}>\n            {children}\n        </ConversationPropsContext.Provider>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}