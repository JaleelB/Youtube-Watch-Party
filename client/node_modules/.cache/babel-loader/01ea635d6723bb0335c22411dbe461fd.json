{"ast":null,"code":"/* eslint-disable promise/prefer-await-to-then */\nconst methodMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'], // New WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'], // Old WebKit\n['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'], ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];\n\nconst nativeAPI = (() => {\n  if (typeof document === 'undefined') {\n    return false;\n  }\n\n  const unprefixedMethods = methodMap[0];\n  const returnValue = {};\n\n  for (const methodList of methodMap) {\n    const exitFullscreenMethod = methodList?.[1];\n\n    if (exitFullscreenMethod in document) {\n      for (const [index, method] of methodList.entries()) {\n        returnValue[unprefixedMethods[index]] = method;\n      }\n\n      return returnValue;\n    }\n  }\n\n  return false;\n})();\n\nconst eventNameMap = {\n  change: nativeAPI.fullscreenchange,\n  error: nativeAPI.fullscreenerror\n}; // eslint-disable-next-line import/no-mutable-exports\n\nlet screenfull = {\n  // eslint-disable-next-line default-param-last\n  request() {\n    let element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.documentElement;\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    return new Promise((resolve, reject) => {\n      const onFullScreenEntered = () => {\n        screenfull.off('change', onFullScreenEntered);\n        resolve();\n      };\n\n      screenfull.on('change', onFullScreenEntered);\n      const returnPromise = element[nativeAPI.requestFullscreen](options);\n\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreenEntered).catch(reject);\n      }\n    });\n  },\n\n  exit() {\n    return new Promise((resolve, reject) => {\n      if (!screenfull.isFullscreen) {\n        resolve();\n        return;\n      }\n\n      const onFullScreenExit = () => {\n        screenfull.off('change', onFullScreenExit);\n        resolve();\n      };\n\n      screenfull.on('change', onFullScreenExit);\n      const returnPromise = document[nativeAPI.exitFullscreen]();\n\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreenExit).catch(reject);\n      }\n    });\n  },\n\n  toggle(element, options) {\n    return screenfull.isFullscreen ? screenfull.exit() : screenfull.request(element, options);\n  },\n\n  onchange(callback) {\n    screenfull.on('change', callback);\n  },\n\n  onerror(callback) {\n    screenfull.on('error', callback);\n  },\n\n  on(event, callback) {\n    const eventName = eventNameMap[event];\n\n    if (eventName) {\n      document.addEventListener(eventName, callback, false);\n    }\n  },\n\n  off(event, callback) {\n    const eventName = eventNameMap[event];\n\n    if (eventName) {\n      document.removeEventListener(eventName, callback, false);\n    }\n  },\n\n  raw: nativeAPI\n};\nObject.defineProperties(screenfull, {\n  isFullscreen: {\n    get: () => Boolean(document[nativeAPI.fullscreenElement])\n  },\n  element: {\n    enumerable: true,\n    get: () => document[nativeAPI.fullscreenElement] ?? undefined\n  },\n  isEnabled: {\n    enumerable: true,\n    // Coerce to boolean in case of old WebKit.\n    get: () => Boolean(document[nativeAPI.fullscreenEnabled])\n  }\n});\n\nif (!nativeAPI) {\n  screenfull = {\n    isEnabled: false\n  };\n}\n\nexport default screenfull;","map":{"version":3,"names":["methodMap","nativeAPI","document","unprefixedMethods","returnValue","methodList","exitFullscreenMethod","index","method","entries","eventNameMap","change","fullscreenchange","error","fullscreenerror","screenfull","request","element","documentElement","options","Promise","resolve","reject","onFullScreenEntered","off","on","returnPromise","requestFullscreen","then","catch","exit","isFullscreen","onFullScreenExit","exitFullscreen","toggle","onchange","callback","onerror","event","eventName","addEventListener","removeEventListener","raw","Object","defineProperties","get","Boolean","fullscreenElement","enumerable","undefined","isEnabled","fullscreenEnabled"],"sources":["/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/node_modules/screenfull/index.js"],"sourcesContent":["/* eslint-disable promise/prefer-await-to-then */\n\nconst methodMap = [\n\t[\n\t\t'requestFullscreen',\n\t\t'exitFullscreen',\n\t\t'fullscreenElement',\n\t\t'fullscreenEnabled',\n\t\t'fullscreenchange',\n\t\t'fullscreenerror',\n\t],\n\t// New WebKit\n\t[\n\t\t'webkitRequestFullscreen',\n\t\t'webkitExitFullscreen',\n\t\t'webkitFullscreenElement',\n\t\t'webkitFullscreenEnabled',\n\t\t'webkitfullscreenchange',\n\t\t'webkitfullscreenerror',\n\n\t],\n\t// Old WebKit\n\t[\n\t\t'webkitRequestFullScreen',\n\t\t'webkitCancelFullScreen',\n\t\t'webkitCurrentFullScreenElement',\n\t\t'webkitCancelFullScreen',\n\t\t'webkitfullscreenchange',\n\t\t'webkitfullscreenerror',\n\n\t],\n\t[\n\t\t'mozRequestFullScreen',\n\t\t'mozCancelFullScreen',\n\t\t'mozFullScreenElement',\n\t\t'mozFullScreenEnabled',\n\t\t'mozfullscreenchange',\n\t\t'mozfullscreenerror',\n\t],\n\t[\n\t\t'msRequestFullscreen',\n\t\t'msExitFullscreen',\n\t\t'msFullscreenElement',\n\t\t'msFullscreenEnabled',\n\t\t'MSFullscreenChange',\n\t\t'MSFullscreenError',\n\t],\n];\n\nconst nativeAPI = (() => {\n\tif (typeof document === 'undefined') {\n\t\treturn false;\n\t}\n\n\tconst unprefixedMethods = methodMap[0];\n\tconst returnValue = {};\n\n\tfor (const methodList of methodMap) {\n\t\tconst exitFullscreenMethod = methodList?.[1];\n\t\tif (exitFullscreenMethod in document) {\n\t\t\tfor (const [index, method] of methodList.entries()) {\n\t\t\t\treturnValue[unprefixedMethods[index]] = method;\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t}\n\n\treturn false;\n})();\n\nconst eventNameMap = {\n\tchange: nativeAPI.fullscreenchange,\n\terror: nativeAPI.fullscreenerror,\n};\n\n// eslint-disable-next-line import/no-mutable-exports\nlet screenfull = {\n\t// eslint-disable-next-line default-param-last\n\trequest(element = document.documentElement, options) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst onFullScreenEntered = () => {\n\t\t\t\tscreenfull.off('change', onFullScreenEntered);\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tscreenfull.on('change', onFullScreenEntered);\n\n\t\t\tconst returnPromise = element[nativeAPI.requestFullscreen](options);\n\n\t\t\tif (returnPromise instanceof Promise) {\n\t\t\t\treturnPromise.then(onFullScreenEntered).catch(reject);\n\t\t\t}\n\t\t});\n\t},\n\texit() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!screenfull.isFullscreen) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst onFullScreenExit = () => {\n\t\t\t\tscreenfull.off('change', onFullScreenExit);\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tscreenfull.on('change', onFullScreenExit);\n\n\t\t\tconst returnPromise = document[nativeAPI.exitFullscreen]();\n\n\t\t\tif (returnPromise instanceof Promise) {\n\t\t\t\treturnPromise.then(onFullScreenExit).catch(reject);\n\t\t\t}\n\t\t});\n\t},\n\ttoggle(element, options) {\n\t\treturn screenfull.isFullscreen ? screenfull.exit() : screenfull.request(element, options);\n\t},\n\tonchange(callback) {\n\t\tscreenfull.on('change', callback);\n\t},\n\tonerror(callback) {\n\t\tscreenfull.on('error', callback);\n\t},\n\ton(event, callback) {\n\t\tconst eventName = eventNameMap[event];\n\t\tif (eventName) {\n\t\t\tdocument.addEventListener(eventName, callback, false);\n\t\t}\n\t},\n\toff(event, callback) {\n\t\tconst eventName = eventNameMap[event];\n\t\tif (eventName) {\n\t\t\tdocument.removeEventListener(eventName, callback, false);\n\t\t}\n\t},\n\traw: nativeAPI,\n};\n\nObject.defineProperties(screenfull, {\n\tisFullscreen: {\n\t\tget: () => Boolean(document[nativeAPI.fullscreenElement]),\n\t},\n\telement: {\n\t\tenumerable: true,\n\t\tget: () => document[nativeAPI.fullscreenElement] ?? undefined,\n\t},\n\tisEnabled: {\n\t\tenumerable: true,\n\t\t// Coerce to boolean in case of old WebKit.\n\t\tget: () => Boolean(document[nativeAPI.fullscreenEnabled]),\n\t},\n});\n\nif (!nativeAPI) {\n\tscreenfull = {isEnabled: false};\n}\n\nexport default screenfull;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}