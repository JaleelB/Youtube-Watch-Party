{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/ConversationContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, useState, createContext, useRef, useEffect, useCallback } from 'react';\nimport { ParticipantContext } from './ParticipantContext';\nimport { useSocketContext } from './SocketContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationPropsContext = /*#__PURE__*/createContext();\nexport function useConversationContext() {\n  _s();\n\n  return useContext(ConversationPropsContext);\n}\n\n_s(useConversationContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n;\nexport function ConversationPropsProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const socket = useSocketContext();\n  const [showChat, setShowChat] = useState(true);\n  const [chat, setChat] = useState([]);\n  const [userMessage, setUserMessage] = useState('');\n  const {\n    name,\n    room\n  } = useContext(ParticipantContext);\n  const inputRef = useRef(null);\n\n  const getUserInput = e => setUserMessage(e.target.value);\n\n  const addMessageToChat = messageData => {\n    if (messageData) {\n      //displays message for all users\n      setChat([...chat, messageData]);\n    }\n  };\n\n  const emitMessage = () => {\n    if (userMessage !== '') {\n      const messageData = {\n        sender: name,\n        message: userMessage\n      }; //sends message to server\n\n      socket.emit('chat_message', {\n        messageData,\n        room\n      });\n    }\n\n    setUserMessage('');\n    inputRef.current.value = \"\";\n  };\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('system_message', message => {\n      addMessageToChat(message);\n    });\n    socket.on(\"receive_chat_message\", data => {\n      addMessageToChat(data);\n    }); //turns off each event listener after it has been fired\n    //to prevent multiple event listeners from being active\n\n    return () => {\n      socket.off('recieve_message');\n      socket.off('system_message');\n      socket.off('user_connected');\n    };\n  }, [socket, addMessageToChat]);\n  const conversationProps = {\n    showChat,\n    setShowChat,\n    chat,\n    setChat,\n    userMessage,\n    setUserMessage,\n    emitMessage,\n    addMessageToChat,\n    inputRef,\n    getUserInput //socket\n\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationPropsContext.Provider, {\n    value: {\n      conversationProps\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ConversationPropsProvider, \"eaDmv+jkjT05CQxrxXk02a1Oksg=\", false, function () {\n  return [useSocketContext];\n});\n\n_c = ConversationPropsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationPropsProvider\");","map":{"version":3,"names":["useContext","useState","createContext","useRef","useEffect","useCallback","ParticipantContext","useSocketContext","ConversationPropsContext","useConversationContext","ConversationPropsProvider","children","socket","showChat","setShowChat","chat","setChat","userMessage","setUserMessage","name","room","inputRef","getUserInput","e","target","value","addMessageToChat","messageData","emitMessage","sender","message","emit","current","on","data","off","conversationProps"],"sources":["/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/ConversationContext.js"],"sourcesContent":["import {useContext, useState, createContext, useRef, useEffect, useCallback} from 'react';\nimport { ParticipantContext } from './ParticipantContext';\nimport { useSocketContext } from './SocketContext';\n\n\nconst ConversationPropsContext = createContext();\n\nexport function useConversationContext(){\n    return useContext(ConversationPropsContext)\n};\n\nexport function ConversationPropsProvider({children}){\n\n    const socket = useSocketContext();\n\n    const [showChat, setShowChat] = useState(true);\n\n    const [ chat, setChat ] = useState([]);\n    const [ userMessage, setUserMessage ] = useState('');\n\n    const {name, room} = useContext(ParticipantContext);\n\n    const inputRef = useRef(null);\n    \n    const getUserInput = (e) => setUserMessage(e.target.value);\n\n    const addMessageToChat = (messageData) => {   \n\n        if(messageData){\n          //displays message for all users\n          setChat([\n            ...chat, messageData\n          ])\n        }\n\n    };\n\n    const emitMessage = () => {\n    \n        if(userMessage !== ''){\n\n            const messageData = {\n                sender: name,\n                message: userMessage\n            }\n\n            //sends message to server\n            socket.emit('chat_message', {messageData, room});\n        }\n\n        setUserMessage('');\n        inputRef.current.value = \"\";\n        \n    };\n\n\n    useEffect(()=>{\n\n        if(!socket) return;\n\n        socket.on('system_message', (message)=>{\n            addMessageToChat(message)\n        })\n\n        socket.on(\"receive_chat_message\", (data) =>{\n            addMessageToChat(data)\n        })\n        \n        //turns off each event listener after it has been fired\n        //to prevent multiple event listeners from being active\n        return () => {\n            socket.off('recieve_message');\n            socket.off('system_message');\n            socket.off('user_connected');\n        }\n\n    },[socket, addMessageToChat])\n\n\n\n    const conversationProps = {\n        showChat, setShowChat,\n        chat, setChat,\n        userMessage, setUserMessage,\n        emitMessage, addMessageToChat,\n         inputRef,\n        getUserInput\n        //socket\n    };\n\n    return (\n        <ConversationPropsContext.Provider value={{conversationProps}}>\n            {children}\n        </ConversationPropsContext.Provider>\n    );\n}\n"],"mappings":";;;;AAAA,SAAQA,UAAR,EAAoBC,QAApB,EAA8BC,aAA9B,EAA6CC,MAA7C,EAAqDC,SAArD,EAAgEC,WAAhE,QAAkF,OAAlF;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;;AAGA,MAAMC,wBAAwB,gBAAGN,aAAa,EAA9C;AAEA,OAAO,SAASO,sBAAT,GAAiC;EAAA;;EACpC,OAAOT,UAAU,CAACQ,wBAAD,CAAjB;AACH;;GAFeC,sB;;AAEf;AAED,OAAO,SAASC,yBAAT,OAA8C;EAAA;;EAAA,IAAX;IAACC;EAAD,CAAW;EAEjD,MAAMC,MAAM,GAAGL,gBAAgB,EAA/B;EAEA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;EAEA,MAAM,CAAEc,IAAF,EAAQC,OAAR,IAAoBf,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAAEgB,WAAF,EAAeC,cAAf,IAAkCjB,QAAQ,CAAC,EAAD,CAAhD;EAEA,MAAM;IAACkB,IAAD;IAAOC;EAAP,IAAepB,UAAU,CAACM,kBAAD,CAA/B;EAEA,MAAMe,QAAQ,GAAGlB,MAAM,CAAC,IAAD,CAAvB;;EAEA,MAAMmB,YAAY,GAAIC,CAAD,IAAOL,cAAc,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAA1C;;EAEA,MAAMC,gBAAgB,GAAIC,WAAD,IAAiB;IAEtC,IAAGA,WAAH,EAAe;MACb;MACAX,OAAO,CAAC,CACN,GAAGD,IADG,EACGY,WADH,CAAD,CAAP;IAGD;EAEJ,CATD;;EAWA,MAAMC,WAAW,GAAG,MAAM;IAEtB,IAAGX,WAAW,KAAK,EAAnB,EAAsB;MAElB,MAAMU,WAAW,GAAG;QAChBE,MAAM,EAAEV,IADQ;QAEhBW,OAAO,EAAEb;MAFO,CAApB,CAFkB,CAOlB;;MACAL,MAAM,CAACmB,IAAP,CAAY,cAAZ,EAA4B;QAACJ,WAAD;QAAcP;MAAd,CAA5B;IACH;;IAEDF,cAAc,CAAC,EAAD,CAAd;IACAG,QAAQ,CAACW,OAAT,CAAiBP,KAAjB,GAAyB,EAAzB;EAEH,CAhBD;;EAmBArB,SAAS,CAAC,MAAI;IAEV,IAAG,CAACQ,MAAJ,EAAY;IAEZA,MAAM,CAACqB,EAAP,CAAU,gBAAV,EAA6BH,OAAD,IAAW;MACnCJ,gBAAgB,CAACI,OAAD,CAAhB;IACH,CAFD;IAIAlB,MAAM,CAACqB,EAAP,CAAU,sBAAV,EAAmCC,IAAD,IAAS;MACvCR,gBAAgB,CAACQ,IAAD,CAAhB;IACH,CAFD,EARU,CAYV;IACA;;IACA,OAAO,MAAM;MACTtB,MAAM,CAACuB,GAAP,CAAW,iBAAX;MACAvB,MAAM,CAACuB,GAAP,CAAW,gBAAX;MACAvB,MAAM,CAACuB,GAAP,CAAW,gBAAX;IACH,CAJD;EAMH,CApBQ,EAoBP,CAACvB,MAAD,EAASc,gBAAT,CApBO,CAAT;EAwBA,MAAMU,iBAAiB,GAAG;IACtBvB,QADsB;IACZC,WADY;IAEtBC,IAFsB;IAEhBC,OAFgB;IAGtBC,WAHsB;IAGTC,cAHS;IAItBU,WAJsB;IAITF,gBAJS;IAKrBL,QALqB;IAMtBC,YANsB,CAOtB;;EAPsB,CAA1B;EAUA,oBACI,QAAC,wBAAD,CAA0B,QAA1B;IAAmC,KAAK,EAAE;MAACc;IAAD,CAA1C;IAAA,UACKzB;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH;;IApFeD,yB;UAEGH,gB;;;KAFHG,yB"},"metadata":{},"sourceType":"module"}