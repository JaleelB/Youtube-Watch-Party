{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/SocketContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext, createContext } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketPropsContext = /*#__PURE__*/createContext();\nexport function useSocketContext() {\n  _s();\n\n  return useContext(SocketPropsContext);\n}\n\n_s(useSocketContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function SocketContextProvider(_ref) {\n  _s2();\n\n  let {\n    id,\n    children\n  } = _ref;\n  const [socket, setSocket] = useState(); //create a socket when page initialy loads or whenever host id changes\n\n  useEffect(() => {\n    const newSocket = io('http://localhost:4000', {\n      query: {\n        id\n      }\n    });\n    setSocket(newSocket); //close out the current socket. This prevents having multiple sockets runnning on\n    //the same server which can result in duplicate messages etc\n\n    return () => newSocket.close();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(SocketPropsContext.Provider, {\n    value: socket,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(SocketContextProvider, \"hiNpVvqoDzQD/SDhIdq26R3jJHg=\");\n\n_c = SocketContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","useContext","createContext","io","SocketPropsContext","useSocketContext","SocketContextProvider","id","children","socket","setSocket","newSocket","query","close"],"sources":["/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/SocketContext.js"],"sourcesContent":["import React, {useEffect, useState, useContext, createContext} from 'react';\nimport io from 'socket.io-client';\n\nconst SocketPropsContext = createContext();\n\nexport function useSocketContext(){\n    return useContext(SocketPropsContext);\n}\n\nexport function SocketContextProvider({id, children}){\n\n    const [socket, setSocket] = useState();\n\n    //create a socket when page initialy loads or whenever host id changes\n    useEffect(()=>{\n        const newSocket = io('http://localhost:4000', {query: {id} })\n        setSocket(newSocket);\n\n        //close out the current socket. This prevents having multiple sockets runnning on\n        //the same server which can result in duplicate messages etc\n        return ()=> newSocket.close();\n    },[id])\n\n    return(\n        <SocketPropsContext.Provider value={socket}>\n            {children}\n        </SocketPropsContext.Provider>\n    )\n}"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,aAAhD,QAAoE,OAApE;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,kBAAkB,gBAAGF,aAAa,EAAxC;AAEA,OAAO,SAASG,gBAAT,GAA2B;EAAA;;EAC9B,OAAOJ,UAAU,CAACG,kBAAD,CAAjB;AACH;;GAFeC,gB;;AAIhB,OAAO,SAASC,qBAAT,OAA8C;EAAA;;EAAA,IAAf;IAACC,EAAD;IAAKC;EAAL,CAAe;EAEjD,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,EAApC,CAFiD,CAIjD;;EACAD,SAAS,CAAC,MAAI;IACV,MAAMY,SAAS,GAAGR,EAAE,CAAC,uBAAD,EAA0B;MAACS,KAAK,EAAE;QAACL;MAAD;IAAR,CAA1B,CAApB;IACAG,SAAS,CAACC,SAAD,CAAT,CAFU,CAIV;IACA;;IACA,OAAO,MAAKA,SAAS,CAACE,KAAV,EAAZ;EACH,CAPQ,EAOP,CAACN,EAAD,CAPO,CAAT;EASA,oBACI,QAAC,kBAAD,CAAoB,QAApB;IAA6B,KAAK,EAAEE,MAApC;IAAA,UACKD;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH;;IAnBeF,qB;;KAAAA,qB"},"metadata":{},"sourceType":"module"}