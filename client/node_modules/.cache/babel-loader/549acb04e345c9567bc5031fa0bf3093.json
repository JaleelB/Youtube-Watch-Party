{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/components/message-body/MessageBody.jsx\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@mui/material';\nimport React, { useState, useCallback, useContext, useEffect } from 'react';\nimport { CommentField, TabSwitch } from '../../components';\nimport { useConversationContext } from '../../context/ConversationContext';\nimport { ParticipantContext } from '../../context/ParticipantContext';\nimport './MessageBody.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MessageBody = _ref => {\n  _s();\n\n  let {\n    socket\n  } = _ref;\n  const props = useConversationContext();\n  const {\n    showChat,\n    messages,\n    setMessages\n  } = props.conversationProps;\n  const {\n    name\n  } = useContext(ParticipantContext); //scrolls into view when latest message is sent\n\n  const setLastMessageRef = useCallback(node => {\n    if (node) node.scrollIntoView({\n      smooth: true\n    });\n  }, []);\n\n  const addMessage = message => {\n    if (message !== '') {\n      setMessages([...messages, message]);\n    }\n  };\n\n  socket.on(\"receive_message\", data => {\n    addMessage(data.message);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    id: \"message-body\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"tab-details-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"tab-title\",\n        children: showChat ? 'Chat' : 'Participants'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TabSwitch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"messages-container\",\n      children: messages.map((messageValue, index) => {\n        //checks if the current message is the last one in the message array\n        const lastMessage = messages.length - 1 === index;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          // className={isMessageSender ? 'align-left' : ''}\n          ref: lastMessage ? setLastMessageRef : null,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message\",\n            children: messageValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 19\n          }, this), name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentField, {\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageBody, \"XzP5kQHq6Ys6jKyqfq48nphJkeo=\", false, function () {\n  return [useConversationContext];\n});\n\n_c = MessageBody;\nexport default MessageBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageBody\");","map":{"version":3,"names":["Box","React","useState","useCallback","useContext","useEffect","CommentField","TabSwitch","useConversationContext","ParticipantContext","MessageBody","socket","props","showChat","messages","setMessages","conversationProps","name","setLastMessageRef","node","scrollIntoView","smooth","addMessage","message","on","data","map","messageValue","index","lastMessage","length"],"sources":["/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/components/message-body/MessageBody.jsx"],"sourcesContent":["import { Box } from '@mui/material';\nimport React, {useState, useCallback, useContext, useEffect} from 'react';\nimport {CommentField, TabSwitch} from '../../components';\nimport { useConversationContext } from '../../context/ConversationContext';\nimport { ParticipantContext } from '../../context/ParticipantContext';\nimport './MessageBody.scss';\n\nconst MessageBody = ({socket}) => {\n\n  const props = useConversationContext();\n  const { \n      showChat, messages, setMessages\n   } = props.conversationProps;\n\n  const {name} = useContext(ParticipantContext);\n\n  //scrolls into view when latest message is sent\n  const setLastMessageRef = useCallback( node => {\n    if(node) node.scrollIntoView({ smooth: true});\n  }, [])\n\n  const addMessage = (message) => {   \n    if(message !== ''){\n      setMessages([\n        ...messages, message\n      ])\n    }\n  };\n\n  \n  socket.on(\"receive_message\", (data) =>{\n    addMessage(data.message)\n  })\n\n  return (\n    <Box id='message-body'>\n      <Box className=\"tab-details-wrapper\">\n          <h2 className=\"tab-title\">{showChat ? 'Chat' : 'Participants'}</h2>\n          <TabSwitch/>\n      </Box>\n        \n      <ul className=\"messages-container\">\n          {\n            messages.map((messageValue, index) => {\n             \n              //checks if the current message is the last one in the message array\n              const lastMessage = messages.length - 1 === index;\n              return (\n                <li \n                  key={index} \n                  // className={isMessageSender ? 'align-left' : ''}\n                  ref={lastMessage ? setLastMessageRef : null}\n                >\n                  <p className=\"message\">{messageValue}</p>\n                  {/* {isMessageSender ? 'You' : ''} */}\n                  {name}\n                </li>\n              )\n            })\n          }\n      </ul>\n\n      <CommentField socket={socket}/>\n\n    </Box>\n  )\n};\n\nexport default MessageBody;"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,eAApB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,WAAzB,EAAsCC,UAAtC,EAAkDC,SAAlD,QAAkE,OAAlE;AACA,SAAQC,YAAR,EAAsBC,SAAtB,QAAsC,kBAAtC;AACA,SAASC,sBAAT,QAAuC,mCAAvC;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AACA,OAAO,oBAAP;;;AAEA,MAAMC,WAAW,GAAG,QAAc;EAAA;;EAAA,IAAb;IAACC;EAAD,CAAa;EAEhC,MAAMC,KAAK,GAAGJ,sBAAsB,EAApC;EACA,MAAM;IACFK,QADE;IACQC,QADR;IACkBC;EADlB,IAEDH,KAAK,CAACI,iBAFX;EAIA,MAAM;IAACC;EAAD,IAASb,UAAU,CAACK,kBAAD,CAAzB,CAPgC,CAShC;;EACA,MAAMS,iBAAiB,GAAGf,WAAW,CAAEgB,IAAI,IAAI;IAC7C,IAAGA,IAAH,EAASA,IAAI,CAACC,cAAL,CAAoB;MAAEC,MAAM,EAAE;IAAV,CAApB;EACV,CAFoC,EAElC,EAFkC,CAArC;;EAIA,MAAMC,UAAU,GAAIC,OAAD,IAAa;IAC9B,IAAGA,OAAO,KAAK,EAAf,EAAkB;MAChBR,WAAW,CAAC,CACV,GAAGD,QADO,EACGS,OADH,CAAD,CAAX;IAGD;EACF,CAND;;EASAZ,MAAM,CAACa,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAS;IACpCH,UAAU,CAACG,IAAI,CAACF,OAAN,CAAV;EACD,CAFD;EAIA,oBACE,QAAC,GAAD;IAAK,EAAE,EAAC,cAAR;IAAA,wBACE,QAAC,GAAD;MAAK,SAAS,EAAC,qBAAf;MAAA,wBACI;QAAI,SAAS,EAAC,WAAd;QAAA,UAA2BV,QAAQ,GAAG,MAAH,GAAY;MAA/C;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,SAAD;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAI,SAAS,EAAC,oBAAd;MAAA,UAEMC,QAAQ,CAACY,GAAT,CAAa,CAACC,YAAD,EAAeC,KAAf,KAAyB;QAEpC;QACA,MAAMC,WAAW,GAAGf,QAAQ,CAACgB,MAAT,GAAkB,CAAlB,KAAwBF,KAA5C;QACA,oBACE;UAEE;UACA,GAAG,EAAEC,WAAW,GAAGX,iBAAH,GAAuB,IAHzC;UAAA,wBAKE;YAAG,SAAS,EAAC,SAAb;YAAA,UAAwBS;UAAxB;YAAA;YAAA;YAAA;UAAA,QALF,EAOGV,IAPH;QAAA,GACOW,KADP;UAAA;UAAA;UAAA;QAAA,QADF;MAWD,CAfD;IAFN;MAAA;MAAA;MAAA;IAAA,QANF,eA2BE,QAAC,YAAD;MAAc,MAAM,EAAEjB;IAAtB;MAAA;MAAA;MAAA;IAAA,QA3BF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgCD,CA3DD;;GAAMD,W;UAEUF,sB;;;KAFVE,W;AA6DN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}