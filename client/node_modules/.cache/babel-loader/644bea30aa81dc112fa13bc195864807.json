{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react'; //used to identify what values are associated with each app on the different localhost servers\n\nconst PREFIX = 'youtube-watch-party-';\nexport default function useSessionStorage(key, initialValue) {\n  _s();\n\n  const prefixedKey = PREFIX + key;\n  const [value, setValue] = useState(() => {\n    const jsonData = sessionStorage.getItem(prefixedKey);\n    if (jsonData !== null) return JSON.parse(jsonData); //if the item specified is not in session storage\n    //and the fucntion version of useState was called\n\n    if (typeof initialValue === 'function') {\n      return initialValue;\n    } else {\n      //if not just return the intial value of use state\n      return initialValue;\n    }\n  }); //if key or value is chnaged, update value in session storage\n  //doing so overides old value\n\n  useEffect(() => {\n    sessionStorage.getItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n  return [value, setValue];\n}\n\n_s(useSessionStorage, \"nHG254gg/G7AoXOL/VCaxEXlGfk=\");","map":{"version":3,"names":["useEffect","useState","PREFIX","useSessionStorage","key","initialValue","prefixedKey","value","setValue","jsonData","sessionStorage","getItem","JSON","parse","stringify"],"sources":["/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/hooks/useSessionStorage.js"],"sourcesContent":["import {useEffect, useState} from 'react';\n\n//used to identify what values are associated with each app on the different localhost servers\nconst PREFIX = 'youtube-watch-party-';\n\nexport default function useSessionStorage(key, initialValue){\n    const prefixedKey = PREFIX + key;\n    const [value, setValue] = useState(()=>{\n        const jsonData = sessionStorage.getItem(prefixedKey);\n        if(jsonData !== null) return JSON.parse(jsonData);\n\n        //if the item specified is not in session storage\n        //and the fucntion version of useState was called\n        if(typeof initialValue === 'function'){\n            return initialValue;\n        }else{\n            //if not just return the intial value of use state\n            return initialValue;\n        }\n    })\n\n    //if key or value is chnaged, update value in session storage\n    //doing so overides old value\n    useEffect(()=>{\n        sessionStorage.getItem(prefixedKey, JSON.stringify(value))\n    },[prefixedKey, value])\n\n    return[value, setValue];\n}"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC,C,CAEA;;AACA,MAAMC,MAAM,GAAG,sBAAf;AAEA,eAAe,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,YAAhC,EAA6C;EAAA;;EACxD,MAAMC,WAAW,GAAGJ,MAAM,GAAGE,GAA7B;EACA,MAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,MAAI;IACnC,MAAMQ,QAAQ,GAAGC,cAAc,CAACC,OAAf,CAAuBL,WAAvB,CAAjB;IACA,IAAGG,QAAQ,KAAK,IAAhB,EAAsB,OAAOG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAP,CAFa,CAInC;IACA;;IACA,IAAG,OAAOJ,YAAP,KAAwB,UAA3B,EAAsC;MAClC,OAAOA,YAAP;IACH,CAFD,MAEK;MACD;MACA,OAAOA,YAAP;IACH;EACJ,CAZiC,CAAlC,CAFwD,CAgBxD;EACA;;EACAL,SAAS,CAAC,MAAI;IACVU,cAAc,CAACC,OAAf,CAAuBL,WAAvB,EAAoCM,IAAI,CAACE,SAAL,CAAeP,KAAf,CAApC;EACH,CAFQ,EAEP,CAACD,WAAD,EAAcC,KAAd,CAFO,CAAT;EAIA,OAAM,CAACA,KAAD,EAAQC,QAAR,CAAN;AACH;;GAvBuBL,iB"},"metadata":{},"sourceType":"module"}