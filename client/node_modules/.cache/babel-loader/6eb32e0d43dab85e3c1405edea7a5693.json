{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext, createContext } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketPropsContext = /*#__PURE__*/createContext();\nexport function useSocketContext() {\n  _s();\n\n  return useContext(SocketPropsContext);\n}\n\n_s(useSocketContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function SocketContextProvider(_ref) {\n  let {\n    id,\n    children\n  } = _ref;\n  const socket = io.connect('http://localhost:4000'); // const [socket, setSocket] = useState();\n  //create a socket when page initialy loads or whenever host id changes\n  // useEffect(()=>{\n  //     // const newSocket = io('http://localhost:4000', {query: {id} })\n  //     const newSocket = io.connect('http://localhost:4000')\n  //     setSocket(newSocket);\n  //     //close out the current socket when new scoket is created. This prevents having multiple sockets runnning on\n  //     //the same server which can result in duplicate messages etc\n  //     return ()=> newSocket.close();\n  // },[id])\n\n  return /*#__PURE__*/_jsxDEV(SocketPropsContext.Provider, {\n    value: socket,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n_c = SocketContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","useContext","createContext","io","SocketPropsContext","useSocketContext","SocketContextProvider","id","children","socket","connect"],"sources":["/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/SocketContext.js"],"sourcesContent":["import React, {useEffect, useState, useContext, createContext} from 'react';\nimport io from 'socket.io-client';\n\nconst SocketPropsContext = createContext();\n\nexport function useSocketContext(){\n    return useContext(SocketPropsContext);\n}\n\nexport function SocketContextProvider({id, children}){\n    const socket = io.connect('http://localhost:4000')\n    // const [socket, setSocket] = useState();\n\n    //create a socket when page initialy loads or whenever host id changes\n    // useEffect(()=>{\n    //     // const newSocket = io('http://localhost:4000', {query: {id} })\n    //     const newSocket = io.connect('http://localhost:4000')\n    //     setSocket(newSocket);\n\n    //     //close out the current socket when new scoket is created. This prevents having multiple sockets runnning on\n    //     //the same server which can result in duplicate messages etc\n    //     return ()=> newSocket.close();\n    // },[id])\n\n    return(\n        <SocketPropsContext.Provider value={socket}>\n            {children}\n        </SocketPropsContext.Provider>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,aAAhD,QAAoE,OAApE;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,kBAAkB,gBAAGF,aAAa,EAAxC;AAEA,OAAO,SAASG,gBAAT,GAA2B;EAAA;;EAC9B,OAAOJ,UAAU,CAACG,kBAAD,CAAjB;AACH;;GAFeC,gB;;AAIhB,OAAO,SAASC,qBAAT,OAA8C;EAAA,IAAf;IAACC,EAAD;IAAKC;EAAL,CAAe;EACjD,MAAMC,MAAM,GAAGN,EAAE,CAACO,OAAH,CAAW,uBAAX,CAAf,CADiD,CAEjD;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;;EAEA,oBACI,QAAC,kBAAD,CAAoB,QAApB;IAA6B,KAAK,EAAED,MAApC;IAAA,UACKD;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH;KApBeF,qB"},"metadata":{},"sourceType":"module"}