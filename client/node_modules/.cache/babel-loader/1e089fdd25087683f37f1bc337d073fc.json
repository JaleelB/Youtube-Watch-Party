{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/VideoContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef, createContext } from 'react';\nimport { useSocketContext } from './SocketContext';\nimport screenfull from 'screenfull';\nimport { ParticipantContext } from './ParticipantContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoContext = /*#__PURE__*/createContext();\nexport function useVideoContext() {\n  _s();\n\n  return useContext(VideoContext);\n}\n\n_s(useVideoContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function VideoContextProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const socket = useSocketContext();\n  const {\n    host\n  } = useContext(ParticipantContext);\n  const [playVideo, setPlayVideo] = useState(false);\n  const [videoDuration, setVideoDuration] = useState(null);\n  const [isSeeking, setIsSeeking] = useState(false); // const [currentTime, setCurrentTime] = useState(0);\n\n  const [secondsElapsed, setSecondsElapsed] = useState(0);\n  const videoPlayerRef = useRef(null);\n  const videoWrapperRef = useRef(null); //this function sets the total length of the vidoe\n\n  const setDuration = duration => setVideoDuration(duration); //switches between pause and play states\n\n\n  const togglePlay = () => setPlayVideo(!playVideo); //makes use of the fullscreen component. makes video wrapper take total viewport width\n\n\n  const handleClickFullscreen = () => screenfull.toggle(videoWrapperRef.current); //sets current time of video based on video slider input\n  // const handleSeekChange = (seconds) =>  setCurrentTime(seconds);  \n  //sets the amount of seconds that have passed in the video\n\n\n  const timeElapsed = elapsedSeconds => setSecondsElapsed(elapsedSeconds); //whenever current time of video changes, seek to that portion of video\n\n\n  const handleVideoSeek = progress => {\n    if (videoPlayerRef.current) videoPlayerRef.current.seekTo(progress, 'seconds');\n  }; //takes a time value in seconds and returns it in hr - minute - second format\n\n\n  const formatTime = timeValue => {\n    timeValue = Number(timeValue);\n    let hours = Math.floor(timeValue / 3600);\n    let minutes = Math.floor(timeValue % 3600 / 60);\n    let seconds = Math.floor(timeValue % 3600 % 60);\n    return hours ? hours + \":\" + minutes + \":\" + seconds : !hours && minutes ? minutes + \":\" + seconds : \"0:\" + seconds;\n  }; //wjhen participant seeks through video, video timestamp is updated when participant releases mouse\n\n\n  const emitTimeOnSeek = elapsedSeconds => socket.emit(\"update_timeStamp_on_videoSeek\", {\n    elapsedSeconds\n  });\n\n  useEffect(() => {\n    if (!socket) return; //when user joins party emit pause message to every one in the party \n\n    socket.on('video_pause_on_userJoin', _ref2 => {\n      let {\n        playVideo,\n        roomTimeStamp\n      } = _ref2;\n      setPlayVideo(playVideo);\n    }); //a new user has zero seconds elapsed so it sets it for all videos\n\n    socket.on('receive_pause_all_videos', _ref3 => {\n      let {\n        playStatus,\n        currentTimeStamp\n      } = _ref3;\n      setPlayVideo(playStatus);\n      setSecondsElapsed(currentTimeStamp);\n      handleVideoSeek(currentTimeStamp);\n    }); //gets the party timeStamp when participant plays video\n\n    socket.on('receive_play_all_videos', _ref4 => {\n      let {\n        playStatus,\n        currentTimeStamp\n      } = _ref4;\n      setPlayVideo(playStatus);\n      setSecondsElapsed(currentTimeStamp);\n      handleVideoSeek(currentTimeStamp);\n    });\n    return () => {\n      socket.off('video_pause');\n      socket.off('receive_pause_all_videos');\n      socket.off('receive_play_all_videos');\n    };\n  }, [socket, playVideo]);\n  useEffect(() => {\n    handleVideoSeek(currentTime);\n  }, [currentTime]); //gets the seconds played thus far in party for video\n  //if host, updates party room timeStamp for everyone in group\n\n  useEffect(() => {\n    if (videoPlayerRef.current) {\n      const interval = setInterval(() => {\n        timeElapsed(videoPlayerRef.current.getCurrentTime());\n        if (host) emitTimeOnSeek(videoPlayerRef.current.getCurrentTime()); // emitTimeOnSeek(videoPlayerRef.current.getCurrentTime());\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [videoPlayerRef.current, host]);\n  const videoProps = {\n    playVideo,\n    togglePlay,\n    videoDuration,\n    setVideoDuration,\n    setDuration,\n    formatTime,\n    currentTime,\n    videoPlayerRef,\n    isSeeking,\n    setIsSeeking,\n    handleClickFullscreen,\n    handleSeekChange,\n    handleVideoSeek,\n    videoWrapperRef,\n    secondsElapsed,\n    emitTimeOnSeek\n  };\n  return /*#__PURE__*/_jsxDEV(VideoContext.Provider, {\n    value: {\n      videoProps\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(VideoContextProvider, \"2GLxrABuoscbeZZAhD4EaDue+iA=\", false, function () {\n  return [useSocketContext];\n});\n\n_c = VideoContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoContextProvider\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useRef","createContext","useSocketContext","screenfull","ParticipantContext","VideoContext","useVideoContext","VideoContextProvider","children","socket","host","playVideo","setPlayVideo","videoDuration","setVideoDuration","isSeeking","setIsSeeking","secondsElapsed","setSecondsElapsed","videoPlayerRef","videoWrapperRef","setDuration","duration","togglePlay","handleClickFullscreen","toggle","current","timeElapsed","elapsedSeconds","handleVideoSeek","progress","seekTo","formatTime","timeValue","Number","hours","Math","floor","minutes","seconds","emitTimeOnSeek","emit","on","roomTimeStamp","playStatus","currentTimeStamp","off","currentTime","interval","setInterval","getCurrentTime","clearInterval","videoProps","handleSeekChange"],"sources":["/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/VideoContext.js"],"sourcesContent":["import React, {useState, useContext, useEffect, useRef, createContext} from 'react';\nimport { useSocketContext } from './SocketContext';\nimport screenfull from 'screenfull';\nimport { ParticipantContext } from './ParticipantContext';\n\nconst VideoContext = createContext();\n\nexport function useVideoContext(){\n    return useContext(VideoContext);\n}\n\nexport function VideoContextProvider({children}){\n\n    const socket = useSocketContext();\n\n    const { host } = useContext(ParticipantContext);\n\n    const [playVideo, setPlayVideo] = useState(false);\n    const [videoDuration, setVideoDuration] = useState(null);\n    const [isSeeking, setIsSeeking] = useState(false);\n    // const [currentTime, setCurrentTime] = useState(0);\n    const [secondsElapsed, setSecondsElapsed] = useState(0);\n\n    const videoPlayerRef = useRef(null);\n    const videoWrapperRef = useRef(null);\n\n\n    //this function sets the total length of the vidoe\n    const setDuration = (duration) => setVideoDuration(duration);\n\n    //switches between pause and play states\n    const togglePlay = () => setPlayVideo(!playVideo);\n    \n    //makes use of the fullscreen component. makes video wrapper take total viewport width\n    const handleClickFullscreen = () =>  screenfull.toggle(videoWrapperRef.current);\n\n    //sets current time of video based on video slider input\n    // const handleSeekChange = (seconds) =>  setCurrentTime(seconds);  \n\n    //sets the amount of seconds that have passed in the video\n    const timeElapsed = (elapsedSeconds) => setSecondsElapsed(elapsedSeconds);\n\n    //whenever current time of video changes, seek to that portion of video\n    const handleVideoSeek = (progress) => {\n        if(videoPlayerRef.current) videoPlayerRef.current.seekTo(progress, 'seconds')\n    }\n    \n    //takes a time value in seconds and returns it in hr - minute - second format\n    const formatTime = (timeValue) => {\n        timeValue = Number(timeValue);\n\n        let hours = Math.floor(timeValue / 3600);\n        let minutes = Math.floor(timeValue % 3600 / 60);\n        let seconds = Math.floor(timeValue % 3600 % 60);\n\n        return hours ? hours + \":\" + minutes + \":\" + seconds\n               : !hours && minutes ? minutes + \":\" + seconds\n               : \"0:\" + seconds;\n    }\n\n    //wjhen participant seeks through video, video timestamp is updated when participant releases mouse\n    const emitTimeOnSeek = (elapsedSeconds) => socket.emit(\"update_timeStamp_on_videoSeek\", {elapsedSeconds})\n\n    useEffect(()=>{\n\n        if(!socket) return;\n        \n        //when user joins party emit pause message to every one in the party \n        socket.on('video_pause_on_userJoin', ({playVideo, roomTimeStamp})=>{ \n            setPlayVideo(playVideo); \n        })\n\n        //a new user has zero seconds elapsed so it sets it for all videos\n        socket.on('receive_pause_all_videos', ({playStatus, currentTimeStamp})=>{ \n            setPlayVideo(playStatus); \n            setSecondsElapsed(currentTimeStamp);\n            handleVideoSeek(currentTimeStamp)\n        })\n\n        //gets the party timeStamp when participant plays video\n        socket.on('receive_play_all_videos', ({playStatus, currentTimeStamp})=>{ \n            setPlayVideo(playStatus); \n            setSecondsElapsed(currentTimeStamp);\n            handleVideoSeek(currentTimeStamp)\n        })\n\n        return () => {\n            socket.off('video_pause');\n            socket.off('receive_pause_all_videos');\n            socket.off('receive_play_all_videos');\n        }\n\n    },[socket, playVideo])\n\n\n    useEffect(()=>{\n        handleVideoSeek(currentTime)\n    },[currentTime])\n\n\n    //gets the seconds played thus far in party for video\n    //if host, updates party room timeStamp for everyone in group\n    useEffect(()=>{\n        if(videoPlayerRef.current){\n            const interval = setInterval(() => {\n                timeElapsed(videoPlayerRef.current.getCurrentTime());\n                if(host) emitTimeOnSeek(videoPlayerRef.current.getCurrentTime());\n                // emitTimeOnSeek(videoPlayerRef.current.getCurrentTime());\n            }, 1000);\n            return () => {\n                clearInterval(interval);\n            };\n        }  \n    },[videoPlayerRef.current, host])\n\n\n    const videoProps = {\n        playVideo, togglePlay,\n        videoDuration, setVideoDuration,\n        setDuration, formatTime, currentTime,\n        videoPlayerRef,isSeeking, setIsSeeking,\n        handleClickFullscreen, handleSeekChange,\n        handleVideoSeek, videoWrapperRef, secondsElapsed,\n        emitTimeOnSeek\n    };\n\n\n     return (\n        <VideoContext.Provider value={{videoProps}}>\n            {children}\n        </VideoContext.Provider>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}