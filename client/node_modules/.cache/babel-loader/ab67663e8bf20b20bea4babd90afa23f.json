{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/VideoContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef, createContext } from 'react';\nimport { useSocketContext } from './SocketContext';\nimport screenfull from 'screenfull';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoContext = /*#__PURE__*/createContext();\nexport function useVideoContext() {\n  _s();\n\n  return useContext(VideoContext);\n}\n\n_s(useVideoContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function VideoContextProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const socket = useSocketContext();\n  const [playVideo, setPlayVideo] = useState(false);\n  const [videoDuration, setVideoDuration] = useState(null);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [secondsElapsed, setSecondsElapsed] = useState(0);\n  const videoPlayerRef = useRef(null);\n  const videoWrapperRef = useRef(null); //this function sets the total length of the vidoe\n\n  const setDuration = duration => setVideoDuration(duration); //switches between pause and play states\n\n\n  const togglePlay = () => setPlayVideo(!playVideo); //makes use of the fullscreen component. makes video wrapper take total viewport width\n\n\n  const handleClickFullscreen = () => screenfull.toggle(videoWrapperRef.current); //sets current time of video based on video slider input\n\n\n  const handleSeekChange = seconds => setCurrentTime(seconds); //sets the amount of seconds that have passed in the video\n\n\n  const timeElapsed = elapsedSeconds => setSecondsElapsed(elapsedSeconds); //whenever current time of video changes, seek to that portion of video\n\n\n  const handleVideoSeek = progress => {\n    if (videoPlayerRef.current) videoPlayerRef.current.seekTo(progress, 'seconds');\n  }; // const emitVideoTimeStamp = (elapsedSeconds) => {\n  //     const interval = setInterval(() => socket.emit(\"update_timeStamp_on_videoSeek\", {timeSeek}), 1000);\n  //     return () => {\n  //         clearInterval(interval);\n  //     };\n  // };\n  //takes a time value in seconds and returns it in hr - minute - second format\n\n\n  const formatTime = timeValue => {\n    timeValue = Number(timeValue);\n    let hours = Math.floor(timeValue / 3600);\n    let minutes = Math.floor(timeValue % 3600 / 60);\n    let seconds = Math.floor(timeValue % 3600 % 60);\n    return hours ? hours + \":\" + minutes + \":\" + seconds : !hours && minutes ? minutes + \":\" + seconds : \"0:\" + seconds;\n  }; //wjhen participant seeks through video, video timestamp is updated when participant releases mouse\n\n\n  const emitTimeOnSeek = elapsedSeconds => socket.emit(\"update_timeStamp_on_videoSeek\", {\n    elapsedSeconds\n  });\n\n  useEffect(() => {\n    if (!socket) return;\n    if (!playVideo && secondsElapsed > 0) socket.emit(\"update_timeStamp_on_userJoin\", {\n      currentTimeStamp: secondsElapsed > 0 && secondsElapsed\n    }); //when user joins party emit pause message to every one in the party \n\n    socket.on('video_pause', _ref2 => {\n      let {\n        playVideo\n      } = _ref2;\n      setPlayVideo(playVideo); // setCurrentTime(roomTimeStamp);\n      // setSecondsElapsed(roomTimeStamp);\n      // handleVideoSeek(roomTimeStamp)\n    }); //this maybe the problem. when user joins, the event is emitted by the pause button\n    //a new user has zero seconds elapsed so it sets it for all videos\n\n    socket.on('receive_pause_all_videos', _ref3 => {\n      let {\n        playStatus,\n        currentTimeStamp\n      } = _ref3;\n      setPlayVideo(playStatus); //when user joins party set time to the time thats in the party \n      // setCurrentTime(currentTimeStamp);\n\n      setSecondsElapsed(currentTimeStamp);\n      handleVideoSeek(currentTimeStamp);\n    }); //when user seeks video update time\n\n    socket.on('receive_play_all_videos', data => {\n      setPlayVideo(data.playVideo);\n    });\n    socket.on('receive_timeStamp_when_user_joins', data => {\n      setSecondsElapsed(data.currentTimeStamp);\n      handleVideoSeek(data.currentTimeStamp);\n    });\n    return () => {\n      socket.off('video_pause');\n      socket.off('receive_pause_all_videos');\n      socket.off('receive_play_all_videos'); // socket.off('receive_timeStamp');\n    };\n  }, [socket, playVideo]);\n  useEffect(() => {\n    handleVideoSeek(currentTime);\n  }, [currentTime]); //gets the seconds played thus far in video  \n  //isue is the the seconds elapsed increments only on the hosts video\n\n  useEffect(() => {\n    if (videoPlayerRef.current) {\n      const interval = setInterval(() => {\n        timeElapsed(videoPlayerRef.current.getCurrentTime());\n        if (playVideo) emitTimeOnSeek(videoPlayerRef.current.getCurrentTime());\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [videoPlayerRef.current, playVideo]);\n  const videoProps = {\n    //fullVideo, setFullVideo,\n    playVideo,\n    togglePlay,\n    videoDuration,\n    setVideoDuration,\n    setDuration,\n    formatTime,\n    currentTime,\n    videoPlayerRef,\n    isSeeking,\n    setIsSeeking,\n    handleClickFullscreen,\n    handleSeekChange,\n    handleVideoSeek,\n    videoWrapperRef,\n    secondsElapsed,\n    emitTimeOnSeek\n  }; //emit for video change when user changes video and emit who chnaged video\n  //emit for video pause - [\n  //when a user joins a party pause a video,\n  //when user presses pause button emit who paused video\n  //emit video timestamp\n  //]\n  //emit for video play\n  //emit video timestamp when user joins \n  //emit current time when user seeks video\n\n  return /*#__PURE__*/_jsxDEV(VideoContext.Provider, {\n    value: {\n      videoProps\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(VideoContextProvider, \"T7TdDbWINuVwtn/lV/+E6fvlXJ8=\", false, function () {\n  return [useSocketContext];\n});\n\n_c = VideoContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoContextProvider\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useRef","createContext","useSocketContext","screenfull","VideoContext","useVideoContext","VideoContextProvider","children","socket","playVideo","setPlayVideo","videoDuration","setVideoDuration","isSeeking","setIsSeeking","currentTime","setCurrentTime","secondsElapsed","setSecondsElapsed","videoPlayerRef","videoWrapperRef","setDuration","duration","togglePlay","handleClickFullscreen","toggle","current","handleSeekChange","seconds","timeElapsed","elapsedSeconds","handleVideoSeek","progress","seekTo","formatTime","timeValue","Number","hours","Math","floor","minutes","emitTimeOnSeek","emit","currentTimeStamp","on","playStatus","data","off","interval","setInterval","getCurrentTime","clearInterval","videoProps"],"sources":["/Users/jaleelbennett/Documents/Projects/Block Watch - YT Watch Party/Youtube-Watch-Party/client/src/context/VideoContext.js"],"sourcesContent":["import React, {useState, useContext, useEffect, useRef, createContext} from 'react';\nimport { useSocketContext } from './SocketContext';\nimport screenfull from 'screenfull'\n\nconst VideoContext = createContext();\n\nexport function useVideoContext(){\n    return useContext(VideoContext);\n}\n\nexport function VideoContextProvider({children}){\n\n    const socket = useSocketContext();\n\n    const [playVideo, setPlayVideo] = useState(false);\n    const [videoDuration, setVideoDuration] = useState(null);\n    const [isSeeking, setIsSeeking] = useState(false);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [secondsElapsed, setSecondsElapsed] = useState(0);\n\n    const videoPlayerRef = useRef(null);\n    const videoWrapperRef = useRef(null);\n\n    //this function sets the total length of the vidoe\n    const setDuration = (duration) => setVideoDuration(duration);\n\n    //switches between pause and play states\n    const togglePlay = () => setPlayVideo(!playVideo);\n    \n    //makes use of the fullscreen component. makes video wrapper take total viewport width\n    const handleClickFullscreen = () =>  screenfull.toggle(videoWrapperRef.current);\n\n    //sets current time of video based on video slider input\n    const handleSeekChange = (seconds) =>  setCurrentTime(seconds);  \n\n    //sets the amount of seconds that have passed in the video\n    const timeElapsed = (elapsedSeconds) => setSecondsElapsed(elapsedSeconds);\n\n    //whenever current time of video changes, seek to that portion of video\n    const handleVideoSeek = (progress) => {\n        if(videoPlayerRef.current) videoPlayerRef.current.seekTo(progress, 'seconds')\n    }\n\n    // const emitVideoTimeStamp = (elapsedSeconds) => {\n    //     const interval = setInterval(() => socket.emit(\"update_timeStamp_on_videoSeek\", {timeSeek}), 1000);\n    //     return () => {\n    //         clearInterval(interval);\n    //     };\n    // };\n    \n    //takes a time value in seconds and returns it in hr - minute - second format\n    const formatTime = (timeValue) => {\n        timeValue = Number(timeValue);\n\n        let hours = Math.floor(timeValue / 3600);\n        let minutes = Math.floor(timeValue % 3600 / 60);\n        let seconds = Math.floor(timeValue % 3600 % 60);\n\n        return hours ? hours + \":\" + minutes + \":\" + seconds\n               : !hours && minutes ? minutes + \":\" + seconds\n               : \"0:\" + seconds;\n    }\n\n    //wjhen participant seeks through video, video timestamp is updated when participant releases mouse\n    const emitTimeOnSeek = (elapsedSeconds) => socket.emit(\"update_timeStamp_on_videoSeek\", {elapsedSeconds})\n\n    useEffect(()=>{\n\n        if(!socket) return;\n\n        if(!playVideo && secondsElapsed > 0) socket.emit(\"update_timeStamp_on_userJoin\", {currentTimeStamp: secondsElapsed > 0 && secondsElapsed} )\n        \n        //when user joins party emit pause message to every one in the party \n        socket.on('video_pause', ({playVideo})=>{ \n            setPlayVideo(playVideo); \n            // setCurrentTime(roomTimeStamp);\n            // setSecondsElapsed(roomTimeStamp);\n            // handleVideoSeek(roomTimeStamp)\n        })\n\n        //this maybe the problem. when user joins, the event is emitted by the pause button\n        //a new user has zero seconds elapsed so it sets it for all videos\n        socket.on('receive_pause_all_videos', ({playStatus, currentTimeStamp})=>{ \n            setPlayVideo(playStatus); \n\n            //when user joins party set time to the time thats in the party \n            // setCurrentTime(currentTimeStamp);\n            setSecondsElapsed(currentTimeStamp);\n            handleVideoSeek(currentTimeStamp)\n        })\n\n        //when user seeks video update time\n\n        socket.on('receive_play_all_videos', (data)=>{ \n            setPlayVideo(data.playVideo); \n        })\n\n        socket.on('receive_timeStamp_when_user_joins', (data)=>{ \n            setSecondsElapsed(data.currentTimeStamp); \n            handleVideoSeek(data.currentTimeStamp)\n        })\n\n        return () => {\n            socket.off('video_pause');\n            socket.off('receive_pause_all_videos');\n            socket.off('receive_play_all_videos');\n            // socket.off('receive_timeStamp');\n        }\n\n    },[socket, playVideo])\n\n\n    useEffect(()=>{\n        handleVideoSeek(currentTime)\n    },[currentTime])\n\n\n    //gets the seconds played thus far in video  \n\n    //isue is the the seconds elapsed increments only on the hosts video\n    useEffect(()=>{\n        if(videoPlayerRef.current){\n            const interval = setInterval(() => {\n                timeElapsed(videoPlayerRef.current.getCurrentTime());\n                if(playVideo) emitTimeOnSeek(videoPlayerRef.current.getCurrentTime());\n            }, 1000);\n            return () => {\n                clearInterval(interval);\n            };\n        }  \n    },[videoPlayerRef.current, playVideo])\n\n\n    const videoProps = {\n        //fullVideo, setFullVideo,\n        playVideo, togglePlay,\n        videoDuration, setVideoDuration,\n        setDuration, formatTime, currentTime,\n        videoPlayerRef,isSeeking, setIsSeeking,\n        handleClickFullscreen, handleSeekChange,\n        handleVideoSeek, videoWrapperRef, secondsElapsed,\n        emitTimeOnSeek\n    };\n\n    \n\n    \n\n    //emit for video change when user changes video and emit who chnaged video\n    //emit for video pause - [\n        //when a user joins a party pause a video,\n        //when user presses pause button emit who paused video\n        //emit video timestamp\n    //]\n    //emit for video play\n    //emit video timestamp when user joins \n    //emit current time when user seeks video\n\n     return (\n        <VideoContext.Provider value={{videoProps}}>\n            {children}\n        </VideoContext.Provider>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}